<?php
/**
 * 路由列表提取组件
 * User: www
 * Date: 18-3-8
 * Time: 上午3:08
 */
namespace klphp\rbac\components;

use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;
use yii\helpers\Json;
use yii\base\Component;

class Routers extends Component{

    public $app;
    private $list=[];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->app=Yii::$app;
    }

    /**
     * 路由格式化
     */
    private function routeFormat($route){
        //用于测试 $route=lcfirst('Fron1123tend/SiteAbcd/RequestPasswordReset');
        //首字母转小写
        $routeArray=explode('/',$route);
        foreach($routeArray as $k => $v){
            $routeArray[$k]=lcfirst($v);
        }
        $route=implode('/',$routeArray);

        //路前大写字符转-[A-Z]
        $preg='/[A-Z]+/';
        return strtolower(preg_replace($preg,'-$0',$route));
    }

    /**
     * 提取可访问的action列表
     * @param $controller       控制器命名空间
     * @param $defaultRoute     默认路由
     * @param $id               控制器名
     * @param $module           所属module或app
     * @throws \yii\base\InvalidConfigException
     */
    private function getActions($controller,$defaultRoute,$id, $module)
    {

        try{
            $controllerObj=Yii::createObject($controller,[
                $id,$module
            ]);

            $this->list[]=$this->routeFormat($defaultRoute).'/*';

            $actions=array_keys($controllerObj->actions());
            if($actions){
                foreach($actions as $name){
                    $route=$defaultRoute.'/'.$name;
                    $route=$this->routeFormat($route);
                    $this->list[] = $route;
                }
            }

            $class = new \ReflectionClass($controllerObj);
            foreach ($class->getMethods() as $method) {
                $name=$method->name;
                if ($method->isPublic() && !$method->isStatic() && strpos($name, 'action') === 0 && $name !== 'actions') {
                    $route=$defaultRoute.'/'.substr($name,6);
                    $route=$this->routeFormat($route);
                    $this->list[] = $route;
                }
            }

        }catch (\Exception $e){
            dump($e->getMessage());
            //dump($controller);
        }

    }

    /**
     * 根据路径提取控制器所有文件的完整命名空间
     * @param string $path
     */
    private function findFileNamespaces(string $path,string $namespace)
    {
        $result=[];
        $files=FileHelper::findFiles($path);

        while ($files) {
            $file = array_pop($files);
            $file=str_replace(['Controller.php', $path, '/'], '', $file);
            $result[$file] = $namespace.'\\'.$file.'Controller';
        }

        return $result;
    }


    /**
     * 默认控制器命名空间列表提取
     * @param $app
     * @param bool $defaultRoute 初始化路由
     */
    private function getRouteList($app,$defaultRoute=false){

        $initRoute=null;
        if(isset($app->controllerPath)){

            //如果controller目录存在则提取所有目录下控制器文件
            $path = $app->controllerPath;
            if(is_dir($path)){
                $files = $this->findFileNamespaces($path,$app->controllerNamespace);

                if($files){
                    foreach($files as $route => $controller){
                        $controllerArray=explode('\\',strtolower($controller));
                        $id=substr(array_pop($controllerArray),0,-10);
                        $initRoute=$defaultRoute?$defaultRoute.'/'.$route:$route;
                        $this->getActions($controller,$initRoute,$id,$app);
                    }
                }

            }
        }

    }


    /**
     * 模块初始化遍历
     * @param bool $app
     * @param array $list
     */
    private function moduleInit($app){
        try{
            $modules=$app->getModules();
            //如果该应用存在子模块
            if($modules){
                //递归遍历
                $modules=array_keys($modules);
                foreach($modules as $key){
                    //初始化模块路由
                    $route=$key;
                    //当前模块
                    $module=$app->getModule($key);
                    //完成路由遍历
                    $this->getRouteList($module,$route);
                    //如果当前模块存在子模块则进行递归遍历
                    $childs=$module->getModules();
                    if($childs){
                        $childs=array_keys($childs);
                        foreach($childs as $childKey){
                            $list[$key.'/'.$childKey]=$module->getModule($childKey);
                        }
                        $this->moduleChild($list);
                    }
                }
            }
        }catch (\Exception $e){
            echo $e->getMessage(); die;
        }
    }

    /**
     * 子模块遍历
     * @param $parentRoute  上级路由
     * @param array $list
     */
    private function moduleChild($list){

        $newList=[];
        foreach($list as $route => $module){
            //完成路由遍历
            $this->getRouteList($module,$route);
            //如果存在子模块递归遍历
            $childs=$module->getModules();
            if($childs){
                $childs=array_keys($childs);
                foreach($childs as $childKey){
                    $newList[$route.'/'.$childKey]=$module->getModule($childKey);
                }
                $this->moduleChild($newList);
            }
        }

    }


    /**
     * 获取路由列表
     * @return array
     */
    public function getRouters()
    {
        $this->getRouteList($this->app);
        $this->moduleInit($this->app);
        if($this->list){
            natcasesort($this->list);
        }
        return $this->list;
    }

}